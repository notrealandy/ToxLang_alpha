// let x int >> 7
// let y int >> 3 + 2 * (x - 4)
// let msg string >> "Hello, Tox!"
// let flag bool >> x > 5 && y < 10

// fnc main () >> void {
//     log(msg)
//     if flag {
//         log("Flag is true!")
//     } elif x == 7 || y == 7 {
//         log("One of the values is 7")
//     } else {
//         log("No condition met")
//     }
//     let result int >> add()
//     log(result)
//     modifyX("TOXXXXX")
//     log(test)
//     return nil // not needed here, but just to show return
// }

// fnc add () >> int {
//     return x + y
// }

// fnc modifyX (a string) >> void {

//     let test int >> 100
//     log("start a")
//     log(a)
//     log("end a")
//     log(x)
//     x >> x + 5
//     log(x)
// }

// let x int >> 1

// fnc main () >> void {
//     let x int >> 7
//     log(x)
//     bar()
// }

// fnc bar () >> void {
//     x >> 2
//     log(x)
// }

// fnc main() >> void {
//     let x int >> 0
//     while x < 5 {
//         log(x)
//         x >> x + 1
//     }
// }

// for let i int >> 0; i < 5; i >> i + 1 {
//     log(i)
// }

// let xs int[] >> [1, 2, 3, 4]
// log(xs[0])      // should print 1
// log(xs[3])      // should print 4

// let names string[] >> ["a", "b", "c"]
// log(names[2])   // should print "c"

let xs int[] >> [1, 2, 3, 4, 5]
xs[1] >> 42
log(xs[1]) // should print 42

let names string[] >> ["a", "b", "c"]
names[0] >> "z"
log(names[0]) // should print "z"
let xs_len int >> len(xs)
log(xs_len) // should print 5